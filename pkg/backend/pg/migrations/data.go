// Code generated by go-bindata.
// sources:
// pkg/backend/pg/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x96\x4f\x4f\xe3\x3c\x10\xc6\xef\xfd\x14\x73\x6b\x2b\x71\x78\xf5\xae\x76\x2f\x9c\xb2\xc5\x2b\xa1\x85\xc0\x96\x22\x2d\xa7\x68\x92\x4c\x8a\xa9\x63\x17\xdb\xe9\xc2\xb7\x5f\x25\x76\x42\xfe\x34\x01\xc4\x8a\x1b\xf6\xcc\xc4\xf3\xfc\xfc\x8c\xe9\x6a\xcd\x82\x0d\x83\x4d\xf0\xfd\x82\xc1\x63\x41\x05\x19\x58\xcc\x00\x00\x78\x0a\x31\xdf\x1a\xd2\x1c\x05\x5c\xaf\xcf\x2f\x83\xf5\x1d\xfc\x64\x77\x27\x55\x54\x62\x4e\x70\x40\x9d\xdc\xa3\x5e\xfc\xff\xf5\xcb\x12\xa4\xb2\x20\x0b\x21\x5c\xfc\x00\x5c\x5a\xda\x92\xee\xed\x6b\xb2\x9a\x93\x01\x93\xa3\x10\x5c\xda\x5e\xb8\x90\xfc\xb1\xa0\x08\xf5\xd6\x40\xac\x94\x20\x94\xbd\x8c\xb4\xd0\x68\xb9\x92\x65\x73\xc3\xfa\xe4\x9e\x92\x1d\x97\xd1\x2b\x59\x02\x79\xfe\x4a\xce\x83\x8a\x23\x93\xdc\x53\x8e\xf0\x60\x94\x8c\xdd\x6e\x8c\xc9\x4e\x65\x59\xc4\x25\xb7\x1c\xc5\xe8\x37\x20\xa5\x0c\x0b\x61\xe1\xbf\x6e\x5d\x8e\x4f\xef\xae\xc9\x30\xb1\x4a\x43\x26\x14\x8e\x27\x27\x9a\xd0\x52\x1a\xa1\x05\xcb\x73\x32\x16\xf3\xfd\x30\x59\xaa\x3f\x8b\xa5\x27\xbd\x4f\xdf\x57\x90\x92\xa0\x7e\x81\x8b\xdc\x86\xe7\xbf\x6e\x19\x2c\x4a\x4f\x9c\xc0\x61\x39\x5b\x9e\xce\x66\xde\x58\xe7\xe1\x19\xfb\xed\x8d\x15\x55\xa6\xb9\x0a\x1b\x9f\x95\xeb\x56\x6e\xcb\x84\x91\xc0\x98\x44\x6d\xc5\x6a\x6b\xca\x6d\x1d\x37\x7e\x1b\x9a\x11\x45\x31\x15\x6f\xb9\x1b\x16\xd5\x61\x27\xe0\xc5\x94\x95\x1d\x41\x9b\xbb\x6b\xe6\xcc\x61\xd1\x16\x06\x82\x1b\x60\xe1\xed\xa5\xef\x74\x5e\x55\xa7\x73\xf7\xdd\xb9\x2e\xa4\xe4\x72\x5b\x2f\x13\x95\xef\x4b\x88\xf5\x3a\x43\x2e\x5e\x92\x53\xc2\xe6\xef\x04\x65\x42\xa2\x15\xe4\xf2\x80\x82\xa7\xf3\xd9\x80\xd7\x83\x8a\xdf\x36\xb2\x63\x23\xe9\x80\xbb\xda\x8e\x1f\xd7\xec\x07\x5b\xb3\x70\xc5\x6e\x9a\x1b\xe3\xe9\xb2\xbc\xc0\x33\x76\xc1\x36\x0c\x56\xc1\xcd\x2a\x38\x63\xee\x33\x68\x2d\xe5\x7b\xdb\x4c\xb6\xdb\xf5\x94\x5a\xc0\xba\x87\x57\x93\xde\x1a\xb0\x14\x6d\x33\x70\xd5\x06\x49\x87\xf4\xed\x46\x35\x16\xf5\x71\xa3\xd6\xfc\xbb\xb1\xa1\x5d\x4b\xa4\x75\xbb\x57\xa1\x27\xec\xd6\xc7\xf0\x47\xd5\x7b\xf2\xb6\x4b\x28\xd3\xa7\x51\xbb\xd3\x26\x40\x7f\xd0\xec\xf5\xb4\xba\x4e\xc6\x8d\xde\xa0\xf0\xf2\x22\xdf\xba\x03\xd2\x68\x76\xbb\xc7\xb1\xb8\xc7\xf8\xd3\xc0\xb4\xbd\xf3\xce\x37\x71\x44\xb8\x17\xd0\x97\xde\xe8\x9a\x10\xaf\xc9\x14\xc2\x7e\x9a\xf6\xd7\xe6\xac\xcf\x86\xb4\x56\x1a\x2c\x3d\xd9\xf1\xa1\xe9\xff\xd7\x3c\x3a\x3d\x4d\xd2\x71\x84\x1e\x43\x8f\x60\x03\x67\x02\xa0\xfb\x29\x20\xc9\xd4\x0c\xff\x01\xa5\x1d\x3d\x43\xfc\x6c\x09\x87\x77\xf0\x61\xb3\xbc\xf4\x1b\x95\xc7\x78\xa5\x6d\x15\x3b\x7a\x5e\x9e\x4e\x16\x76\x29\xb5\x6b\x1b\x50\x7f\x03\x00\x00\xff\xff\x89\x4b\xfb\xaa\xb1\x09\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2481, mode: os.FileMode(436), modTime: time.Unix(1622858385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

