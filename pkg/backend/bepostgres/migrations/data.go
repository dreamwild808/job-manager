// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x4b\x8f\xda\x30\x10\xc7\xef\x7c\x8a\xb9\x01\x12\x87\xaa\x55\x7b\xe9\x89\x6e\x5d\x09\xb5\x4b\xb7\xec\x22\x95\x53\x34\x49\x26\x60\x70\x6c\xd6\x9e\xd0\xdd\x6f\x5f\x11\x27\x69\x1e\x84\x87\xaa\xbd\xc1\x3c\xe2\x99\x9f\xff\xff\xe4\x6e\x21\xa6\x4f\x02\x9e\xa6\x5f\x7e\x08\x78\xce\x28\x23\x07\xa3\x01\x00\x80\x8c\x21\x94\x6b\x47\x56\xa2\x82\x87\xc5\xec\x7e\xba\x58\xc1\x77\xb1\x9a\xe4\x59\x8d\x29\xc1\x01\x6d\xb4\x41\x3b\x7a\xff\xf1\xc3\x18\xb4\x61\xd0\x99\x52\x3e\x7f\x00\xa9\x99\xd6\x64\x5b\x71\x4b\x6c\x25\x39\x70\x29\x2a\x25\x35\xb7\xd2\x99\x96\xcf\x19\x05\x68\xd7\x0e\x42\x63\x14\xa1\x6e\x55\xc4\x99\x45\x96\x46\x1f\x87\xeb\xf6\x47\x1b\x8a\x76\x52\x07\x17\xaa\x14\xca\xf4\x42\xcd\xd6\x84\x81\x8b\x36\x94\x22\x6c\x9d\xd1\xa1\x8f\x86\x18\xed\x4c\x92\x04\x52\x4b\x96\xa8\x7a\x9f\x01\x31\x25\x98\x29\x86\x77\xcd\xbe\x14\x5f\x6e\xee\x49\x30\x62\x63\x21\x51\x06\xfb\x8b\x23\x4b\xc8\x14\x07\xc8\xc0\x32\x25\xc7\x98\xee\xbb\xc5\xda\xfc\x19\x8d\x0b\xd2\xfb\xf8\xb6\x86\x98\x14\xb5\x1b\x7c\x66\x39\x9f\xfd\x5a\x0a\x18\x1d\x35\x31\x81\xc3\x78\x30\xfe\x3c\x18\x74\x85\x15\x28\x0c\x49\x95\xf2\xca\x43\xe7\x14\xd4\x50\xd8\xa7\xae\xc0\x50\x65\xe7\xf2\x35\xc5\xc2\x28\x3f\x6c\x02\xc5\x80\xc7\xce\xe6\x90\xab\x07\xe1\x2f\x9c\x91\x33\x07\xd3\x47\x10\xf3\xe5\x7d\x31\xe9\x30\xef\x8e\x87\xfe\xb9\x43\x9b\x69\x2d\xf5\xba\xfc\x1b\x99\x74\x7f\x04\x53\xfe\x4f\x50\xaa\x7f\xc5\x31\x61\xf5\x3b\x42\x1d\x91\xaa\x25\xa5\x3e\xa0\x92\xf1\xb0\xcb\x6b\x6b\xc2\xeb\x6c\xd8\x67\x33\x0f\xdc\xf7\x36\x34\xb6\x10\xdf\xc4\x42\xcc\xef\xc4\x63\xe5\x76\x19\x17\x37\x8c\xcc\x94\xee\xb9\xf2\xa6\x8f\x16\x4c\x6a\x78\x9a\x47\xe5\x5e\xad\x59\x24\x46\xae\x2c\x93\x07\x48\x7b\x80\xd7\x4b\xcd\x31\xda\xd3\x52\x2b\x69\x37\x73\x27\x01\x06\xb9\xcb\xaf\xc3\x78\x2c\x3f\x0f\xcb\xdf\x48\x85\xea\x3f\xc5\x59\x3a\xc6\x9f\xdb\x2f\xcc\xd9\xfc\xab\xf8\x5d\x5b\x26\x28\x06\xfd\x39\x6f\x6c\xe8\xa3\xa7\x21\xf8\x17\xe2\x1b\x61\xa8\xdf\xf5\x8d\x6f\xa1\x9e\x35\x8b\x71\xdb\x8b\x56\x5b\x9c\x59\xd5\x92\xcb\x14\xbf\xd1\xa6\x97\x5c\xd0\x26\x41\xd6\x1a\x0b\x4c\x2f\xdc\x2f\xe9\xf6\x57\xe9\xa4\xb6\xab\xa2\xd3\xc0\x8a\xa5\x5b\xbc\x2a\x14\x67\x70\xf9\x4f\xad\x26\x57\x12\xdb\xd1\x2b\x84\xaf\x4c\xd8\xc5\x75\xe3\xbd\xfe\x0d\x00\x00\xff\xff\xaf\x9c\xb7\xd4\x55\x08\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2133, mode: os.FileMode(436), modTime: time.Unix(1612158770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

