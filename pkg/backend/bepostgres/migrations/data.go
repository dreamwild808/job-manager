// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xf0\x96\x04\x68\x2f\x1b\xb6\xcb\x4e\x59\xa1\x01\xc5\xd6\xa0\x4b\x9b\x43\x4e\x06\x6d\xb1\x89\x52\x59\x4a\x25\x2a\x5b\xfe\xfd\x60\xcb\x76\x1d\x3b\x9f\x18\x7a\xb3\x49\x3e\x8b\x7c\xef\xd1\xba\x9b\x89\xc9\xb3\x80\xe7\xc9\xf7\x5f\x02\xde\x02\x05\xf2\x30\x1a\x00\x00\x28\x09\xa9\x5a\x7a\x72\x0a\x35\x3c\xce\xee\x1f\x26\xb3\x05\xfc\x14\x8b\x9b\x32\x6b\x30\x27\xd8\xa2\xcb\x56\xe8\x46\x9f\xbe\x7c\x1e\x83\xb1\x0c\x26\x68\x1d\xf3\x5b\x50\x86\x69\x49\xae\x13\xcf\xac\xc9\x82\x73\x64\xb2\x1d\xf8\x1c\xb5\x56\x86\x3b\x25\x8e\xd8\x29\xf2\xc7\xd2\xc1\xa8\xb7\x40\x09\xba\xa5\x87\xd4\x5a\x4d\x68\x3a\x15\x32\x38\x64\x65\x4d\xd1\x7f\x1f\x9f\xad\x28\x7b\x55\x26\x39\x53\xa5\x51\xe5\x67\x6a\xd6\x36\x4d\x7c\xb6\xa2\x1c\x61\xed\xad\x49\x2b\xa4\x23\x64\x92\x09\x32\xb0\xca\xc9\x33\xe6\x9b\x06\x08\x92\x5e\x30\xe8\xe2\x4b\x7f\x46\xe3\x6a\xa0\x8d\xbc\x0e\x20\x49\x53\x17\x10\x33\xf3\xe9\xfd\xef\xb9\x80\x51\xa1\xce\x0d\x6c\xc7\x83\xf1\xb7\xc1\xa0\x2f\x71\xa2\x31\x25\x5d\x0b\x5d\x86\x4e\x69\xb9\xa7\xf5\xd7\xbe\xd4\xa8\xc3\xa9\x7c\xcb\x3b\x30\x2a\x0f\xbb\x81\xaa\xc1\x02\xb9\xdf\xe4\xe2\x51\x44\x5e\x19\x39\x78\x98\x3c\x81\x98\xce\x1f\xaa\x4e\x87\x25\x5a\x0e\xe3\x77\x87\x2e\x18\xa3\xcc\xb2\x7e\xcd\x6c\xbe\x29\x88\xa9\xdf\x5f\x50\xe9\xf7\x62\x49\xd8\x3c\x67\x68\x32\xd2\xad\xa4\x32\x5b\xd4\x4a\x0e\xfb\x7c\xad\x6d\x7a\xd9\x42\x1c\x33\x7c\x24\x3c\x62\xdb\x16\x82\x99\xf8\x21\x66\x62\x7a\x27\x9e\x9a\xbd\x53\xb2\x52\x18\x99\x29\xdf\x70\xb3\x02\x31\x5a\x71\xd2\xa2\x67\xff\xa8\x72\x25\x5a\x4e\x94\xc8\x8d\x33\xcb\x00\x99\x48\xe0\xe5\x56\xf3\x8c\xae\x6b\xb5\x32\x71\x7b\x0b\x35\xdf\x9d\xec\x21\x0a\x93\x72\x9d\x2e\x23\xb2\x28\x3f\x4d\x57\xd4\xa4\x21\xeb\x3f\xed\x59\xef\x4c\x3c\xf7\x84\x35\xdf\x87\x89\x7f\x90\x0f\x1a\xa7\xad\xda\x95\xff\x93\xc3\xed\x3a\xf2\x41\xf3\x07\x75\x7b\xce\x93\xdd\x69\xc8\x39\xeb\x80\xe9\x2f\x1f\x37\x58\xef\xca\x38\xe4\xb3\xa6\xe8\xf0\xd0\xf1\x96\x30\xe4\xeb\xb9\x5f\x69\x07\xe9\x8e\x09\xfb\x43\x5f\xc9\xf0\xbf\x00\x00\x00\xff\xff\x56\x87\xa7\x2e\x33\x07\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 1843, mode: os.FileMode(436), modTime: time.Unix(1609731957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

