// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\xcf\x4f\xdb\x30\x14\xc7\xef\xfd\x2b\xde\xad\xad\xc4\x61\xda\xb4\x5d\x38\x75\xcc\x93\xd0\x46\x60\x05\xa4\x71\x8a\x5e\x92\x97\x62\xea\xd8\xc5\x76\x3a\xf8\xef\xa7\xc4\x8e\xc9\x8f\x26\x50\x21\x6e\xf5\xfb\x11\xbf\xef\xa7\xdf\x97\x9c\xad\xd9\xea\x86\xc1\xcd\xea\xfb\x6f\x06\x8f\x25\x95\x64\x60\x31\x03\x00\xe0\x19\x24\x7c\x63\x48\x73\x14\x70\xb5\x3e\xbf\x58\xad\xef\xe0\x17\xbb\x3b\xa9\xb3\x12\x0b\x82\x3d\xea\xf4\x1e\xf5\xe2\xf3\xd7\x2f\x4b\x90\xca\x82\x2c\x85\x70\xf9\x3d\x70\x69\x69\x43\xba\x17\xd7\x64\x35\x27\x03\xa6\x40\x21\xb8\xb4\xbd\x74\x29\xf9\x63\x49\x31\xea\x8d\x81\x44\x29\x41\x28\x7b\x15\x59\xa9\xd1\x72\x25\xab\xe1\x86\xfd\xe9\x3d\xa5\x5b\x2e\xe3\x57\xaa\x04\xf2\xe2\x95\x9a\x07\x95\xc4\x26\xbd\xa7\x02\xe1\xc1\x28\x99\xb8\x68\x82\xe9\x56\xe5\x79\xcc\x25\xb7\x1c\xc5\xe8\x33\x20\xa3\x1c\x4b\x61\xe1\x53\xb7\xaf\xc0\xa7\xa3\x7b\x72\x4c\xad\xd2\x90\x0b\x85\xe3\xc5\xa9\x26\xb4\x94\xc5\x68\xc1\xf2\x82\x8c\xc5\x62\x37\x2c\x96\xea\xdf\x62\xe9\x49\xef\xb2\xe3\x1a\x32\x12\xd4\x6f\x70\x99\xdb\xe8\xfc\xcf\x2d\x83\x45\xe5\x89\x13\xd8\x2f\x67\xcb\xd3\xd9\xcc\x1b\xeb\x3c\xfa\xc1\xfe\x7a\x63\xc5\xb5\x69\x2e\xa3\xe0\xb3\xea\xdc\xaa\x6d\x99\x30\x16\x98\x90\x68\xac\x58\x87\xa6\xdc\xd6\x71\xe3\xb7\xa1\x19\x51\x94\x53\xf9\x96\xbb\x61\x51\x5f\x76\x02\x5e\x4c\xd5\xd9\x11\x74\x73\x77\xc5\x9c\x39\x2c\xda\xd2\xc0\xea\x1a\x58\x74\x7b\xe1\x27\x9d\xd7\xdd\xd9\xdc\x3d\x77\xae\x4b\x29\xb9\xdc\x34\xc7\x54\x15\xbb\x0a\x62\x73\xce\x91\x8b\x97\xe2\x8c\x30\xfc\x4e\x51\xa6\x24\x5a\x49\x2e\xf7\x28\x78\x36\x9f\x0d\x78\x3d\xa8\xe4\x6d\x2b\x3b\xb6\x92\x0e\xb8\xeb\xed\xf8\x71\xcd\x7e\xb2\x35\x8b\xce\xd8\x75\xf8\xc7\x78\xe6\xdd\x80\xd6\x52\xb1\xb3\x61\x8f\x5d\xd4\x33\x69\xe1\xe9\x5e\x55\xef\x75\x6b\x9d\x32\xb4\x61\xbd\xea\x00\x49\x07\xf0\xed\xb6\x34\x16\xf5\x61\x5b\x36\xb4\xbb\xb9\xa1\x39\x2b\x80\xcd\xb8\x97\x91\xe7\xe9\xce\x87\x60\xc7\xf5\xdb\xe3\x6d\xc8\xab\xf2\x69\xb0\xee\xb6\x80\xf5\x9d\x46\x6e\x36\xd1\xdd\x3b\x6e\xe2\x20\xdc\x8b\x89\xfd\xa0\x4e\x7e\x50\xe8\xa2\x87\x21\xb8\x17\xed\x07\x61\x68\xfb\xe2\xc8\xb7\xdb\x88\x4c\x3f\x6e\x5f\x68\x50\x31\x21\x55\x93\x29\x85\xfd\x20\xa5\xaf\x6d\x4c\x9f\x04\x69\xad\x34\x58\x7a\xb2\xe3\xf6\xef\x7f\xed\x0e\xee\x41\x28\x3a\x0c\xcc\x8b\xee\xf1\x0a\x28\x26\x70\xb9\x4f\xb8\x24\xd3\x10\x3b\x9a\xc9\x96\x9e\x21\x79\xb6\x84\x43\xbe\xef\x36\xc2\xcb\x74\x71\x75\x8d\xd7\xd5\x9e\x79\x4b\xcf\xcb\xd3\xc9\xc6\x2e\x93\x76\x6f\xc0\xf2\x3f\x00\x00\xff\xff\x17\x87\x2f\xf8\x57\x09\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2391, mode: os.FileMode(436), modTime: time.Unix(1614474930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

