// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x4d\x6f\xdb\x3c\x0c\xc7\xef\xf9\x14\xbc\x25\x01\x7a\x78\xf0\x0c\xdb\xa5\xa7\xac\xd3\x80\x62\x6b\xd6\xa5\x2d\xb0\x9e\x0c\xda\xa6\x13\x25\xb2\x94\x4a\x74\xd6\x7c\xfb\xc1\x96\xed\xfa\x25\xce\x0b\x8a\xde\x22\xbe\x84\xe4\x4f\x7f\xca\x37\x0b\x31\x7b\x14\xf0\x38\xfb\xfa\x53\xc0\x4b\x46\x19\x39\x98\x8c\x00\x00\x64\x0c\xa1\x5c\x3a\xb2\x12\x15\xdc\x2f\x6e\xef\x66\x8b\x67\xf8\x21\x9e\xaf\x0a\xaf\xc6\x94\x60\x87\x36\x5a\xa1\x9d\xfc\xff\xf9\xd3\x14\xb4\x61\xd0\x99\x52\xde\xbf\x03\xa9\x99\x96\x64\x3b\x76\x4b\x6c\x25\x39\x70\x29\x2a\x25\x35\x77\xdc\x99\x96\x2f\x19\x05\x68\x97\x0e\x42\x63\x14\xa1\xee\x44\xc4\x99\x45\x96\x46\xe7\xcd\xf5\xf3\xa3\x15\x45\x1b\xa9\x83\x13\x51\x0a\x65\x7a\x22\x66\x6d\xc2\xc0\x45\x2b\x4a\x11\xd6\xce\xe8\xd0\x5b\x43\x8c\x36\x26\x49\x02\xa9\x25\x4b\x54\x83\xff\x01\x31\x25\x98\x29\x86\xff\xda\x79\x29\xbe\x5e\x9c\x93\x60\xc4\xc6\x42\xa2\x0c\x0e\x07\x47\x96\x90\x29\x0e\x90\x81\x65\x4a\x8e\x31\xdd\xf6\x83\xb5\xf9\x3b\x99\x96\xa4\xb7\xf1\x65\x09\x31\x29\xea\x26\x78\xcf\xd3\xfc\xf6\xf7\x93\x80\x49\xae\x89\x2b\xd8\x4d\x47\xd3\xeb\xd1\xa8\x2f\xac\x40\x61\x48\xaa\x92\x57\x61\x3a\xa6\xa0\x96\xc2\xbe\xf4\x05\x86\x2a\x3b\xe6\x6f\x28\x16\x26\x45\xb1\x2b\x28\x1b\xcc\x33\xdb\x4d\x3e\xdf\x0b\x7f\xe1\x8c\x9c\x39\x98\x3d\x80\x98\x3f\xdd\x95\x9d\x8e\x8b\xec\x78\xec\xff\x77\x6c\x33\xad\xa5\x5e\x56\xc7\xc8\xa4\xdb\x1c\x4c\x75\x4e\x50\xaa\xb7\xe0\x98\xb0\xfe\x1d\xa1\x8e\x48\x35\x9c\x52\xef\x50\xc9\x78\xdc\xe7\xb5\x36\xe1\x79\x6b\x38\xb4\x66\x1e\xb8\xcf\x6d\x69\x6c\x21\xbe\x8b\x85\x98\xdf\x88\x87\x7a\xdb\x65\x5c\xde\x30\x32\x53\xba\xe5\x7a\x37\xbd\xb5\x64\xd2\xc0\xd3\x2e\x55\xec\x6a\x63\x45\x62\xe4\x7a\x65\x0a\x03\x69\x0f\xf0\x7c\xa9\x39\x46\x7b\x58\x6a\x15\xed\xb6\xaf\x09\xf0\x76\xfe\x4d\xfc\x29\x00\x56\xed\xfe\x9a\x97\x3c\xfd\xf9\x10\xec\xa0\x78\x11\xce\x43\x9e\x87\x1f\x07\xeb\xab\xd5\x58\xdf\x29\xe4\x6a\xbb\x7c\xdd\x61\x11\xd7\x83\x97\xc3\x04\x65\xa3\x7e\xfc\x7a\x42\x6f\x3d\x0c\xc1\x3f\x9e\x1f\x84\xa1\xa9\x8b\x0b\x5f\xac\x81\x31\xcb\x76\xbb\x83\xd6\x53\x1c\x19\xd5\x92\xcb\x14\x7f\xd0\xa4\xa7\x36\xa6\x4b\x82\xac\x35\x16\x98\x5e\x79\x58\xfe\xdd\x2f\xd8\xc1\x3d\xa8\x83\x0e\x03\x2b\x87\xee\xf0\xaa\x51\x1c\xc1\xe5\x3f\xcb\x9a\x5c\x45\x6c\x43\x7b\x08\xf7\x4c\xd8\xc7\xf5\xee\x7b\x7d\x2b\x16\xe4\x65\xca\x36\x9b\x2d\x6c\x68\x3f\xbd\x1e\xfd\x0b\x00\x00\xff\xff\xaf\x7f\x8e\x60\xbb\x08\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2235, mode: os.FileMode(436), modTime: time.Unix(1612171143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

