// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xf0\x96\x04\x68\x81\x61\xc3\x76\xd9\x29\x2b\x34\xa0\xd8\x1a\x74\x69\x73\xc8\xc9\xa0\x2d\x3a\x51\x22\x4b\xa9\x44\x65\xed\xbf\x1f\x62\xc5\x6e\x6c\xe7\x13\x43\x6f\x36\xc9\x67\x91\x8f\xef\x59\x77\x13\x31\x7a\x16\xf0\x3c\xfa\xf1\x5b\xc0\x4b\xa0\x40\x1e\x06\x3d\x00\x00\x25\x21\x55\x73\x4f\x4e\xa1\x86\xc7\xc9\xfd\xc3\x68\x32\x83\x5f\x62\x76\x53\x66\x0d\x16\x04\x1b\x74\xd9\x02\xdd\xe0\xf3\xd7\x2f\x43\x30\x96\xc1\x04\xad\x63\x7e\x03\xca\x30\xcd\xc9\xb5\xe2\x8e\xd8\x29\xf2\xe0\x0b\xd4\x5a\x19\x6e\xa5\x83\x51\x2f\x81\x12\x74\x73\x0f\xa9\xb5\x9a\xd0\xb4\x2a\x64\x70\xc8\xca\x9a\x6d\x73\x5d\x7c\xb6\xa0\x6c\xa5\x4c\x72\xa6\x4a\xa3\x2a\xce\xd4\x2c\x6d\x9a\xf8\x6c\x41\x05\xc2\xd2\x5b\x93\xc6\x68\x8a\xd9\xca\xe6\x79\xa2\x8c\x62\x85\xfa\xe8\x37\x40\x52\x8e\x41\x33\x7c\x6a\xe2\x0a\x7c\xbd\x1a\x93\x63\xc6\xd6\x41\xae\x2d\x1e\x2f\xce\x1c\x21\x93\x4c\x90\x81\x55\x41\x9e\xb1\x58\x77\x8b\x8d\xfd\x3b\x18\xee\x98\x5e\xcb\xeb\x00\x92\x34\xb5\x01\x31\x33\x1d\xdf\xff\x99\x0a\x18\x6c\x35\x71\x03\x9b\x61\x6f\xf8\xbd\xd7\xeb\x0a\x2b\xd1\x98\x92\xae\xe4\x55\x86\x4e\x29\xa8\xa1\xb0\x6f\x5d\x81\xa1\x0e\xa7\xf2\x7b\x8a\x85\x41\x79\xd8\x0d\xec\x1a\xdc\x22\x9b\x4d\xce\x1e\x45\x5c\x38\x23\x07\x0f\xa3\x27\x10\xe3\xe9\xc3\xae\xd3\x7e\x89\x96\xfd\xf8\xdd\xbe\x0b\xc6\x28\x33\xaf\x5e\x33\x5b\xac\xb7\xc4\x54\xef\x39\x2a\xfd\x5e\x2c\x09\xeb\xe7\x0c\x4d\x46\x7a\x2f\xa9\xcc\x06\xb5\x92\xfd\x2e\x5f\x4b\x9b\x5e\x66\xc3\x63\x36\x8b\x84\x47\x6c\x43\x63\x13\xf1\x53\x4c\xc4\xf8\x4e\x3c\xd5\x6e\x57\x72\xb7\x61\x64\xa6\x62\xcd\xb5\x37\x63\x74\xc7\xc9\x1e\x3d\xcd\xa3\x4a\xaf\xee\x59\x44\x22\xd7\x96\x29\x03\x64\x22\x81\x97\x4b\xcd\x33\xba\xb6\xd4\xca\xc4\xed\x2d\x54\x7c\xb7\xb2\x87\x28\x4c\x4a\x9f\x5f\x46\xe4\xb6\xfc\x34\x5d\x71\x27\x35\x59\xff\x29\xcf\xca\x33\xf1\xdc\x13\xd2\x7c\x1f\x26\xfe\xda\x3e\x68\x9c\xfd\xad\x5d\xf9\x3f\x39\xdc\xae\x23\x1f\x34\x7f\x50\xb7\xe7\x34\xd9\x9e\x86\x9c\xb3\x0e\x98\x5e\xf9\xb8\xc0\xda\x77\xc4\x41\x9d\xd5\x45\x87\x87\x8e\xd7\x97\x21\x5f\xcd\xbd\xa2\x37\x48\xdf\x98\xb0\x3b\xf4\x95\x0c\xff\x0b\x00\x00\xff\xff\x79\x38\xd6\x6b\xa9\x07\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 1961, mode: os.FileMode(436), modTime: time.Unix(1610737348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

