// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xf0\x16\x07\x48\x2f\x1b\xb6\xcb\x4e\x59\xa1\x01\xc5\xd6\xa0\x73\x9b\x43\x4e\x06\x6d\xb1\x89\x52\x59\x4e\x25\x2a\x5b\xff\xfd\x60\xcb\x76\x1d\x3b\xcd\x07\x86\xdc\x62\x92\x4f\x22\xdf\x7b\x54\x6e\x63\x31\x7b\x12\xf0\x34\xfb\xfe\x4b\xc0\xab\x27\x4f\x0e\xa2\x11\x00\x80\x92\x90\xaa\x95\x23\xab\x50\xc3\x43\x7c\x77\x3f\x8b\x97\xf0\x53\x2c\xa7\x55\xd6\x60\x4e\xb0\x43\x9b\xad\xd1\x46\x9f\xbe\x7c\x9e\x80\x29\x18\x8c\xd7\x3a\xe4\x77\xa0\x0c\xd3\x8a\x6c\x2f\x6e\x89\xad\x22\x07\x2e\x47\xad\x95\xe1\x5e\xda\x1b\xf5\xea\x29\x41\xbb\x72\x90\x16\x85\x26\x34\xbd\x0a\xe9\x2d\xb2\x2a\x4c\xd9\xdc\x10\x9f\xad\x29\x7b\x51\x26\x39\x51\xa5\x51\xe5\x27\x6a\x36\x45\x9a\xb8\x6c\x4d\x39\xc2\xc6\x15\x26\xad\x91\x96\x90\x49\x26\xc8\xc0\x2a\x27\xc7\x98\x6f\x5b\x20\x48\x7a\x46\xaf\xcb\x93\xfe\x44\x93\x7a\xa0\xad\xbc\x0c\x20\x49\x53\x1f\x10\x32\x8b\xf9\xdd\xef\x85\x80\xa8\xa4\x7e\x0a\xbb\xc9\x68\xf2\x6d\x34\x1a\xea\x97\x68\x4c\x49\x37\x2a\x56\xa1\x63\x42\xed\x09\xf9\x75\xa8\x23\x6a\x7f\x2c\xdf\x31\x06\x44\xd5\x65\x53\xa8\x1b\x2c\x91\xfb\x4d\x2e\x1f\x44\xe0\x95\x91\xbd\x83\xd9\x23\x88\xf9\xe2\xbe\xee\x74\x5c\xa1\xe5\x38\x9c\x3b\xb6\xde\x18\x65\x56\xcd\x67\x56\xe4\xdb\x92\x98\xe6\xfb\x19\x95\x7e\x2f\x96\x84\xed\xef\x0c\x4d\x46\xba\x93\x54\x66\x87\x5a\xc9\xf1\x90\xaf\x4d\x91\x9e\xe7\xf6\x8f\xdc\x1c\x08\x0f\xd8\xae\x85\x20\x16\x3f\x44\x2c\xe6\xb7\xe2\xb1\x5d\x2a\x25\x6b\x85\x91\x99\xf2\x2d\xb7\x2b\x10\xa2\x35\x27\x1d\x7a\xf6\xaf\xaa\x56\xa2\xe3\x44\x89\xdc\x3a\xb3\x0a\x90\x09\x04\x9e\x6f\x35\xc7\x68\xfb\x56\xab\x12\x37\x37\xd0\xf0\xdd\xcb\x1e\xa2\x30\xa9\xd6\xe9\x3c\x22\xcb\xf2\xe3\x74\x05\x4d\x5a\xb2\xfe\xd3\x9e\xcd\xce\x84\x7b\x8f\x58\xf3\x7d\x98\xf0\x82\x5c\x69\x9c\xae\x6a\x17\xbe\x27\x87\xdb\xb5\xe4\xbc\xe6\x2b\x75\x7b\xca\x93\xfd\x69\xc8\xda\xc2\x02\xd3\x5f\xfe\xd8\x60\xfd\xa7\xf8\xa0\xcf\xda\xa2\xc3\x43\x87\x7f\x09\x43\xae\x99\xfb\x85\xde\x20\x7d\x63\xc2\xe1\xd0\x17\x32\xfc\x2f\x00\x00\xff\xff\xb1\x4e\x7b\xc8\x10\x07\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 1808, mode: os.FileMode(436), modTime: time.Unix(1610348729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

