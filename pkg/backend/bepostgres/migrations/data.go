// Code generated by go-bindata.
// sources:
// pkg/backend/bepostgres/migrations/0001_create.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x4b\x6f\xda\x40\x10\xc7\xef\x7c\x8a\xb9\x01\x52\x22\x55\xad\xda\x4b\x4f\x34\xdd\x4a\xa8\x0d\x4d\x49\x90\xca\xc9\x1a\xdb\x63\x58\x58\xef\x92\xdd\x31\x4d\xbe\x7d\x85\xd7\x76\xfd\xc0\x3c\x54\xe5\x06\xf3\xf0\xce\xfc\xf6\xff\xb7\xef\xe6\x62\xf2\x24\xe0\x69\xf2\xe5\x87\x80\xe7\x8c\x32\x72\x30\x1a\x00\x00\xc8\x18\x42\xb9\x72\x64\x25\x2a\x78\x98\x4f\xef\x27\xf3\x25\x7c\x17\xcb\x9b\x3c\xab\x31\x25\xd8\xa3\x8d\xd6\x68\x47\xef\x3f\x7e\x18\x83\x36\x0c\x3a\x53\xca\xe7\xf7\x20\x35\xd3\x8a\x6c\x2b\x6e\x89\xad\x24\x07\x2e\x45\xa5\xa4\xe6\x56\x3a\xd3\xf2\x39\xa3\x00\xed\xca\x41\x68\x8c\x22\xd4\xad\x8a\x38\xb3\xc8\xd2\xe8\xc3\x70\xdd\xfe\x68\x4d\xd1\x56\xea\xe0\x4c\x95\x42\x99\x9e\xa9\xd9\x98\x30\x70\xd1\x9a\x52\x84\x8d\x33\x3a\xf4\xd1\x10\xa3\xad\x49\x92\x40\x6a\xc9\x12\x55\xef\x33\x20\xa6\x04\x33\xc5\xf0\xae\xd9\x97\xe2\xcb\xd5\x3d\x09\x46\x6c\x2c\x24\xca\x60\x7f\x71\x64\x09\x99\xe2\x00\x19\x58\xa6\xe4\x18\xd3\x5d\xb7\x58\x9b\x3f\xa3\x71\x41\x7a\x17\x5f\xd7\x10\x93\xa2\x76\x83\xcf\x2c\x66\xd3\x5f\x0b\x01\xa3\x83\x26\x6e\x60\x3f\x1e\x8c\x3f\x0f\x06\x5d\x61\x05\x0a\x43\x52\xa5\xbc\xf2\xd0\x29\x05\x35\x14\xf6\xa9\x2b\x30\x54\xd9\xa9\x7c\x4d\xb1\x30\xca\x0f\xbb\x81\x62\xc0\x43\x67\x73\xc8\xe5\x83\xf0\x17\xce\xc8\x99\x83\xc9\x23\x88\xd9\xe2\xbe\x98\x74\x98\x77\xc7\x43\xff\xdc\xa1\xcd\xb4\x96\x7a\x55\xfe\x8d\x4c\xba\x3b\x80\x29\xff\x27\x28\xd5\xbf\xe2\x98\xb0\xfa\x1d\xa1\x8e\x48\xd5\x92\x52\xef\x51\xc9\x78\xd8\xe5\xb5\x31\xe1\x65\x36\xec\xb3\x99\x07\xee\x7b\x1b\x1a\x9b\x8b\x6f\x62\x2e\x66\x77\xe2\xb1\x72\xbb\x8c\x8b\x1b\x46\x66\x4a\x77\x5c\x79\xd3\x47\x0b\x26\x35\x3c\xcd\xa3\x72\xaf\xd6\x2c\x12\x23\x57\x96\xc9\x03\xa4\x3d\xc0\xcb\xa5\xe6\x18\x6d\x5b\x6a\x79\xe2\xf6\x16\x4a\xde\xad\xec\x31\x84\x41\xee\xf3\xcb\x40\x1e\xca\x4f\xe3\xf2\x77\x52\xc1\xfa\x4f\x79\x96\x9e\xf1\xe7\xf6\x4b\x73\x3a\xfb\x2a\x7e\xd7\x96\x09\x8a\x41\x7f\xce\x1a\x1b\xfa\xe8\x71\x08\xfe\x95\xf8\x46\x18\xea\xb7\x7d\xe5\x7b\xa8\x67\xcd\x62\xdc\xf6\xa2\xd5\x16\x27\x56\xb5\xe4\x32\xc5\x6f\xb4\xe9\x39\x1f\xb4\x49\x90\xb5\xc6\x02\xd3\x0b\xf7\x8b\xba\xfd\x5d\x3a\xaa\xed\xaa\xe8\x38\xb0\x62\xe9\x16\xaf\x0a\xc5\x09\x5c\xfe\x63\xab\xc9\x95\xc4\xb6\xf4\x0a\xe1\x2b\x13\x76\x71\x5d\x79\xaf\x7f\x03\x00\x00\xff\xff\x9b\x5e\x5f\x81\x57\x08\x00\x00")

func _0001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_createUpSql,
		"0001_create.up.sql",
	)
}

func _0001_createUpSql() (*asset, error) {
	bytes, err := _0001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create.up.sql", size: 2135, mode: os.FileMode(436), modTime: time.Unix(1611740124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create.up.sql": _0001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create.up.sql": &bintree{_0001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

